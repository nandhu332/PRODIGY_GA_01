from transformers import GPT2LMHeadModel, GPT2Tokenizer
import torch
import gradio as gr

tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model     = GPT2LMHeadModel.from_pretrained("gpt2")
model.eval()

def generate_text(prompt, decoding_method):
    input_ids = tokenizer.encode(prompt, return_tensors="pt")
    
    if decoding_method == "greedy":
        output = model.generate(input_ids, max_length=100)
    elif decoding_method == "beam":
        output = model.generate(input_ids, max_length=100, num_beams=5, early_stopping=True)
    elif decoding_method == "top-k":
        output = model.generate(input_ids, max_length=100, do_sample=True, top_k=50)
    elif decoding_method == "top-p":
        output = model.generate(input_ids, max_length=100, do_sample=True, top_p=0.95)

    return tokenizer.decode(output[0], skip_special_tokens=True)

from transformers import TextDataset, DataCollatorForLanguageModeling, Trainer, TrainingArguments

def fine_tune_model():
    train_dataset = TextDataset(
        tokenizer=tokenizer,
        file_path="custom_dataset.txt",
        block_size=128,
    )
    data_collator = DataCollatorForLanguageModeling(
        tokenizer=tokenizer, mlm=False
    )

    training_args = TrainingArguments(
        output_dir="./output",
        overwrite_output_dir=True,
        num_train_epochs=1,
        per_device_train_batch_size=2,
        save_steps=10_000,
        save_total_limit=2,
    )

    trainer = Trainer(
        model=model,
        args=training_args,
        data_collator=data_collator,
        train_dataset=train_dataset,
    )

    trainer.train()
    model.save_pretrained("output")
    tokenizer.save_pretrained("output")

interface = gr.Interface(
    fn=generate_text,
    inputs=[
        gr.Textbox(label="Prompt"),
        gr.Radio(["greedy", "beam", "top-k", "top-p"], label="Decoding Method")
    ],
    outputs="text"
)

if __name__ == "__main__":
    interface.launch()

# fine_tune_model()  # Uncomment to fine-tune

